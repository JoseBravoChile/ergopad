version: '3.9'

# docker compose -f docker-compose-{env}.yml --profile {env} up -d
# up will include changes; rebuilding container if needed
# -d = daemon mode

# docker compose -f docker-compose-dev.yml -f docker-compose.yml up flower

services:

  nginx:
    container_name: nginx
    image: nginx:1.21
    volumes: 
      - ./nginx:/etc/nginx
    ports: 
      - ${NGINX_PORT}:${NGINX_PORT}

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile.backend
    volumes: 
      - ./backend/app:/app
    ports: 
      - ${BACKEND_PORT}:${BACKEND_PORT}
    depends_on: 
      - postgres
    command: uvicorn main:app --reload --workers 4 --reload-dir /app --host 0.0.0.0 --port ${BACKEND_PORT}

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: Dockerfile.frontend
    volumes: 
      - ./frontend:/app
    ports: 
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    profiles: 
      - frontend
    command: yarn start

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    restart: always
    volumes: 
      - postgres_data:/var/lib/postgresql/data:cached
    ports: 
      - ${POSTGRES_PORT}:${POSTGRES_PORT}

  redis:
    container_name: redis
    image: redis
    volumes: 
      - redis_data:/data # redis persistence
    ports: 
      - ${REDIS_PORT}:6379
    entrypoint: redis-server --appendonly yes

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports: 
      - ${PGADMIN_LISTEN_PORT}:${PGADMIN_LISTEN_PORT}
    depends_on:
      - postgres
    profiles: 
      - monitor

  aggregator:
    container_name: aggregator
    build:
      context: .
      dockerfile: Dockerfile.aggregator
    volumes: 
      - ./aggregator/app:/app # !! update for main docker-compose file
    ports: 
      - ${AGGREGATOR_PORT}:${AGGREGATOR_PORT}
    # command: uvicorn main:app --reload --workers 4 --reload-dir /app --host 0.0.0.0 --port ${AGGREGATOR_PORT}
    command: python main.py # TODO: automate with celery and API to call refreshes; infinite loop for now

  celery:
    container_name: celery
    build:
      context: .
      dockerfile: Dockerfile.celery
    volumes: 
      - ./celery/app:/app # !! update for main docker-compose file
    # command: celery --app app.tasks worker --loglevel=${CELERY_LOGLEVEL} -Q main-queue -c 1

  flower:  
    container_name: flower
    image: mher/flower
    ports: 
      - ${FLOWER_PORT}:${FLOWER_PORT}
    depends_on:
      - redis
      - celery
    profiles: 
      - monitor
    command: celery --broker=redis://redis:${REDIS_PORT}/0 flower --port=${FLOWER_PORT}

  ergonode:
    container_name: ergonode
    image: openjdk
    volumes:
      - ./ergonode/:/opt/ergo # jar/conf
      - /ergo/mainnet/.ergo:/opt/ergo/.ergo # blockchain
    ports:
      - ${ERGONODE_PORT}:9053
    working_dir: /opt/ergo
    logging:
        driver: "json-file"
        options:
            max-file: 5
            max-size: 10m
    command: java -jar -Xmx3G -Dlogback.stdout.level=${ERGONODE_LOGLEVEL} -Dlogback.file.level=${ERGONODE_LOGLEVEL} ergo.jar --${ERGONODE_NETWORK} -c ${ERGONODE_CONF}

  assembler:
    container_name: assembler
    image: openjdk:11.0.13-jdk-buster
    volumes: 
      - ./assembler/:/opt/assembler
    ports: 
      - ${ASSEMBLER_PORT}:${ASSEMBLER_PORT}
    working_dir: /opt/assembler # set this if using image and not build
    logging:
        driver: "json-file"
        options:
            max-file: 5
            max-size: 10m
    command: java -jar -Dconfig.file=${ASSEMBLER_CONF} -Dhttp.port=${ASSEMBLER_PORT} ${ASSEMBLER_JAR}

volumes:
  postgres_data:
  redis_data:
