version: '3.9'

services:
  # copythis:
    # container_name: template
    # env_file: .env
    # image: hello-world # or build
    # volumes: .:/opt/hello
    # ${SERVICE_PORT}:54321 # set in .env; # HOST:CONTAINER

  nginx:
    container_name: nginx
    env_file: .env
    image: nginx:1.21
    volumes: 
      - ./nginx:/etc/nginx
    ports: 
      - ${NGINX_PORT}:80
    profiles: 
      - all
      - nginx

  backend:
    container_name: backend
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile.backend
    volumes: 
      - ./backend/app:/app
    ports: 
      - ${BACKEND_PORT}:${BACKEND_PORT}
    depends_on: 
      - postgres
    command: uvicorn main:app --reload --workers 4 --reload-dir /app --host 0.0.0.0 --port ${BACKEND_PORT}

  frontend:
    container_name: frontend
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile.frontend
    volumes: 
      - ./frontend:/app
    ports: 
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    profiles: 
      - frontend # this profile would need to be passed for this to be enabled
    # command: yarn dev # start
    command: tail /dev/null -f

  postgres:
    container_name: postgres
    env_file: .env
    image: postgres:14-alpine
    restart: always
    volumes: 
      - postgres_data:/var/lib/postgresql/data:cached
    ports: 
      - ${POSTGRES_PORT}:5432

  redis:
    container_name: redis
    env_file: .env
    image: redis
    volumes: 
      - redis_data:/data # redis persistence
    ports: 
      - ${REDIS_PORT}:6379
    entrypoint: redis-server --appendonly yes

  pgadmin:
    container_name: pgadmin
    env_file: .env
    image: dpage/pgadmin4
    ports: 
      - ${PGADMIN_LISTEN_PORT}:${PGADMIN_LISTEN_PORT}
    depends_on:
      - postgres
    profiles: 
      - monitor

  aggregator:
    container_name: aggregator
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile.aggregator
    volumes: 
      - ./aggregator/app:/app
    ports: 
      - ${AGGREGATOR_PORT}:${AGGREGATOR_PORT}
    # command: uvicorn main:app --reload --workers 4 --reload-dir /app --host 0.0.0.0 --port ${AGGREGATOR_PORT}
    command: python main.py # TODO: automate with celery and API to call refreshes; infinite loop for now
    # command: tail /dev/null -f # stall

  worker:
    container_name: worker
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile.aggregator
    volumes: 
      - ./aggregator/app:/app
    command: celery --app tasks worker --loglevel=DEBUG -Q main-queue -c 1
    # command: tail /dev/null -f # stall

  flower:  
    container_name: flower
    env_file: .env
    image: mher/flower
    ports: 
      - ${FLOWER_PORT}:${FLOWER_PORT}
    depends_on:
      - redis
      - celery
    profiles: 
      - monitor
    command: celery flower --broker=redis://redis:${REDIS_PORT}/0 --port=${FLOWER_PORT}

  ergonode:
    container_name: ergonode
    env_file: .env
    image: openjdk
    volumes:
      - ./ergonode/:/opt/ergo # jar/conf
      - /ergo/mainnet/:/ergo # blockchain
    ports:
      - ${ERGONODE_PORT}:${ERGONODE_PORT}
      - 9030:9030
    working_dir: /opt/ergo
    logging:
        driver: "json-file"
        options:
            max-file: 5
            max-size: 10m
    command: java -jar -Xmx3G -Dlogback.stdout.level=WARN -Dlogback.file.level=ERROR ergo.jar --mainnet -c mainnet.conf

  assembler:
    container_name: assembler
    env_file: .env
    image: openjdk:11.0.13-jdk-buster
    volumes: 
      - ./assembler/:/opt/assembler
    ports: 
      - ${ASSEMBLER_PORT}:${ASSEMBLER_PORT}
    working_dir: /opt/assembler # set this if using image and not build
    command: java -jar -Dconfig.file=mainnet.conf -Dhttp.port=${ASSEMBLER_PORT} ergo-assembler-1.1.jar
    # command: tail /dev/null -f

#   ergostratum:
#     container_name: ergostratum
#     env_file: .env
#     build: 
#       context: .
#       dockerfile: Dockerfile.stratum
#     volumes: './stratum:/opt/ergo'
#     ports: 8008:8008 # stratum
#     depends_on: ergonode
#     command: nodemon ./tulip.js -e js # restart on js file changes

volumes:
  postgres_data:
  redis_data:
